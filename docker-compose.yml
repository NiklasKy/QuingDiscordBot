version: "3.8"

services:
  # luckperms-db:
  #   image: "postgres:16-alpine"
  #   container_name: "luckperms-postgres"
  #   environment:
  #     # Datenbank-Konfiguration
  #     POSTGRES_DB: "luckperms"
  #     POSTGRES_USER: "luckperms"
  #     POSTGRES_PASSWORD: ${LUCKPERMS_DB_PASSWORD}
  #     # Neuer Datenpfad
  #     PGDATA: "/var/lib/postgresql/data/pgdata"
  #   ports:
  #     # Port-Mapping: Host-Port:Container-Port
  #     - "5433:5432"
  #   volumes:
  #     # Angepasstes Volume-Mapping
  #     - type: volume
  #       source: luckperms-data
  #       target: /var/lib/postgresql/data
  #   restart: unless-stopped
  #   # Netzwerk-Konfiguration für bessere Isolation
  #   networks:
  #     - luckperms-network
  #   # Neue Sicherheitseinstellungen
  #   stop_grace_period: 30s
  #   stop_signal: SIGTERM
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U luckperms -d luckperms"]
  #     interval: 10s
  #     timeout: 5s

  # husksync-db:
  #   image: "postgres:16-alpine"
  #   container_name: "husksync-postgres"
  #   environment:
  #     POSTGRES_DB: "husksync"
  #     POSTGRES_USER: "husksync"
  #     POSTGRES_PASSWORD: ${HUSKSYNC_DB_PASSWORD}
  #   ports:
  #     - "5434:5432"
  #   volumes:
  #     - type: volume
  #       source: husksync-data
  #       target: /var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - luckperms-network
  #   # Neue Sicherheitseinstellungen
  #   stop_grace_period: 30s
  #   stop_signal: SIGTERM
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U husksync -d husksync"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

  # quingcorporation-db:
  #   image: "postgres:16-alpine"
  #   container_name: "quingcorporation-postgres"
  #   environment:
  #     POSTGRES_DB: quingcorporation
  #     POSTGRES_USER: quingcorporation
  #     POSTGRES_PASSWORD: ${QUINGCORPORATION_DB_PASSWORD}
  #     PGDATA: "/var/lib/postgresql/data/pgdata"
  #   ports:
  #     - "5435:5432"
  #   volumes:
  #     - type: volume
  #       source: quingcorporation-data
  #       target: /var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - quingcorporation-network
  #   stop_grace_period: 30s
  #   stop_signal: SIGTERM
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U quingcorporation -d quingcorporation"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  quingcorporation-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "quingcorporation-bot"
    environment:
      # - DB_HOST=quingcorporation-db
      # - DB_PORT=5432
      # - DB_NAME=quingcorporation
      # - DB_USER=quingcorporation
      # - DB_PASSWORD=${QUINGCORPORATION_DB_PASSWORD}
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - MOD_CHANNEL_ID=${MOD_CHANNEL_ID}
      - WHITELIST_CHANNEL_ID=${WHITELIST_CHANNEL_ID}
      - SCHEDULE_CHANNEL_ID=${SCHEDULE_CHANNEL_ID}
      - SCHEDULE_EMOJI_ID=${SCHEDULE_EMOJI_ID}
      - ANNOUNCEMENT_CHANNEL_ID=${ANNOUNCEMENT_CHANNEL_ID}
      - ADMIN_ROLE_ID=${ADMIN_ROLE_ID}
      - MOD_ROLE_ID=${MOD_ROLE_ID}
      # - RCON_HOST=${RCON_HOST}
      # - RCON_PORT=${RCON_PORT}
      # - RCON_PASSWORD=${RCON_PASSWORD}
    # depends_on:
    #   quingcorporation-db:
    #     condition: service_healthy
    restart: unless-stopped
    networks:
      - quingcorporation-network
    stop_grace_period: 30s
    stop_signal: SIGTERM

  # redis:
  #   image: "redis:7-alpine"
  #   container_name: "minecraft-redis"
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - type: volume
  #       source: redis-data
  #       target: /data
  #   command: redis-server --appendonly yes --save 60 1 --stop-writes-on-bgsave-error no
  #   restart: unless-stopped
  #   networks:
  #     - quingcorporation-network
  #   # Neue Sicherheitseinstellungen
  #   stop_grace_period: 30s
  #   stop_signal: SIGTERM
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

  # minecraft-mysql:
  #   image: "mysql:8.0"
  #   container_name: "minecraft-mysql"
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MINECRAFT_MYSQL_ROOT_PASSWORD}
  #     MYSQL_DATABASE: minecraft
  #     MYSQL_USER: minecraft
  #     MYSQL_PASSWORD: ${MINECRAFT_MYSQL_PASSWORD}
  #     MYSQL_ROOT_HOST: "%"  # Erlaubt Root-Verbindungen von überall
  #   command: >
  #     --default-authentication-plugin=mysql_native_password
  #     --character-set-server=utf8mb4
  #     --collation-server=utf8mb4_unicode_ci
  #     --bind-address=0.0.0.0
  #     --skip-host-cache
  #     --skip-name-resolve
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - type: volume
  #       source: minecraft-mysql-data
  #       target: /var/lib/mysql
  #   restart: unless-stopped
  #   networks:
  #     - quingcorporation-network
  #   stop_grace_period: 30s
  #   stop_signal: SIGTERM
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MINECRAFT_MYSQL_ROOT_PASSWORD}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

volumes:
  # luckperms-data:
  #   name: "luckperms-postgres-data"
  # husksync-data:
  #   name: "husksync-postgres-data"
  # quingcorporation-data:
  #   name: "quingcorporation-postgres-data"
  # redis-data:
  #   name: "minecraft-redis-data"
  # minecraft-mysql-data:
  #   name: "minecraft-mysql-data"
  # Empty volumes section to satisfy docker-compose requirements
  dummy-volume:
    name: "dummy-volume"

networks:
  quingcorporation-network:
    name: "quingcorporation-network"